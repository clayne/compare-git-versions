#!/usr/bin/env perl
use strict;
use warnings;
use 5.10.1;
use Data::Dumper;$Data::Dumper::Indent=1;
use Data::Dump;
use Carp;
use File::Spec;
use Getopt::Long;
our $VERSION = 0.01;

my ($workdir, $program, $before, $after) = ('') x 4;
my ($benchmarks_only, $tests_only, $verbose) = ('') x 3;
my ($blib_lib_dir, $cmd);

=head1 NAME

compare-git-versions - Command-line utility for benchmarking and testing

=head1 SYNOPSIS

    perl compare-git-versions \
        --workdir=/home/perlhacker/gitwork/list-compare \
        --program=/home/perlhacker/learn/perl/lc/getcomp.pl \
        --before=v0.38 \
        --after=master \
        --tests-only \
        --verbose
   # or, instead of 'tests-only':

        --benchmarks-only

=head1 DESCRIPTION

This program is a command-line utility intended to facilitate the refactoring
of Perl library functions for the purpose of improving their speed of execution.
This program will be useful to you if:

=over 4

=item *

Your functions are found in typical Perl modules (F<.pm> files) organized like
a typical CPAN distribution, I<i.e.,> built and tested by the following
sequence of commands:

    perl Makefile.PL
    make
    make test

=item *

You keep your code in version control using git.

=item *

You already have a robust test suite for the library, so you will be instantly
alerted if you break code during refactoring.

=back

=cut

GetOptions(
    "workdir=s"         => \$workdir,
    "program=s"         => \$program,
    "before=s"          => \$before,
    "after=s"           => \$after,
    "benchmarks-only"   => \$benchmarks_only,
    "tests-only"        => \$tests_only,
    "verbose"           => \$verbose,
) or croak("Error in command line arguments");

my %required = (
    workdir => $workdir,
    program => $program,
    before  => $before,
    after   => $after,
);
my @missing = ();
for my $switch (keys %required) {
    push @missing, $switch unless $required{$switch};
}
my $fail = "Must supply values for command-line switches:";
for my $m (@missing) {
    $fail .= ' --' . $m;
}
$fail .= "\n";
croak($fail) if @missing;

croak("Select either 'tests-only' or 'benchmarks-only' -- but not both!")
    if ($tests_only && $benchmarks_only);

my $reduction = $tests_only ? '--tests-only' :
                $benchmarks_only ? '--benchmarks-only' :
                '';
croak("Cannot locate git checkout directory '$workdir'") unless (-d $workdir);
croak("Cannot locate benchmarking program '$program'") unless (-f $program);

chdir $workdir or croak "Unable to change to $workdir";
my $makefile = File::Spec->catfile($workdir, 'Makefile');
if (-f $makefile) {
    system("make -s clean") and croak "Unable to 'make -s clean'";
}
system("git checkout $before") and croak "Unable to checkout version '$before'";
system("$^X Makefile.PL && make -s") and croak "Unable to make -s";
$blib_lib_dir = File::Spec->catdir($workdir, 'blib', 'lib');
croak("Cannot locate blib/lib directory '$blib_lib_dir'") unless (-d $blib_lib_dir);

# benchmark using 'before' version of library
$cmd = "$^X -I$blib_lib_dir $program $reduction --verbose";
if ($verbose) { say $cmd }
system($cmd) and croak "Unable to run 'before' version";

system("make -s clean") and croak "Unable to 'make -s clean'";
system("git checkout $after") and croak "Unable to checkout version '$after'";
system("$^X Makefile.PL && make -s") and croak "Unable to make -s";
$blib_lib_dir = File::Spec->catdir($workdir, 'blib', 'lib');
croak("Cannot locate blib/lib directory '$blib_lib_dir'") unless (-d $blib_lib_dir);

# benchmark using 'after' version of library
$cmd = "$^X -I$blib_lib_dir $program $reduction --verbose";
if ($verbose) { say $cmd }
system($cmd) and croak "Unable to run 'after' version";

system("make -s clean") and croak "Unable to 'make -s clean'";

=head1 WORKFLOW

=head2 Source Code Revisions

Starting from your library's master branch, create a new branch in which you
refactor the code in the hope of making it run faster.

    git checkout -b refactored

    # Hack, hack, hack

    git add ...

    git commit -m "Refactored guts of is_LsubsetR() to make it faster."

Make sure all the library's existing tests continue to pass.

    perl Makefile.PL
    make
    make test

Debug all failing tests before proceeding.

=head2 The Direct Benchmark/Test Program

In this documentation a B<Direct> program is a simple Perl program which
offers command-line switches for either testing or benchmarking library
functions which you wish to refactor.

=over 4

=item *

In a directory dedicated to holding files for work on a particular library,
write a Perl program in which, at a minimum, you import Benchmark,
Test::More, Getopt::Long and Carp:

    # /home/perlhacker/learn/perl/lc/subset.pl
    use strict;
    use warnings;
    use Test::More qw( no_plan );
    use Benchmark qw( timethis );
    use Getopt::Long;
    use Carp;

=item *

Add to your Perl library path (C<@INC>) the full path to the F<blib/lib/>
directory underneath the git checkout directory in which you customarily work
on the library in question.

    use lib '/home/perlhacker/gitwork/list-compare/blib/lib';

=item *

Import the library and, if needed, the particular functions whose performance
you want to improve via refactoring:

    use List::Compare::Functional qw( is_LsubsetR );

=item *

Include the following code for the purpose of processing command-line options:

    my ($tests_only, $benchmarks_only, $verbose) = (0,0,0);

    GetOptions(
        "tests-only"        => \$tests_only,
        "benchmarks-only"   => \$benchmarks_only,
        "verbose"           => \$verbose,
    ) or croak("Error in command line arguments");
    croak("Select either 'tests-only' or 'benchmarks-only' -- but not both!")
        if ($tests_only && $benchmarks_only);
    if ($benchmarks_only) { pass("Running benchmarks only") };
    if ($tests_only) { pass("Running tests only") };

This code permits you to control, from command-line options, whether you are
running the program for testing, for benchmarking or for both and whether you
are requesting any verbose output.

=item *

Create the data you will use for testing and benchmarking:

    my $aabcdefg = [ qw(abel abel baker camera delta edward fargo golfer) ];
    my $bcddefgh = [ qw(baker camera delta delta edward fargo golfer hilton) ];
    my $fghiij   = [ qw(fargo golfer hilton icon icon jerky) ];
    my $fghii    = [ qw(fargo golfer hilton icon icon) ];
    my $ffghi    = [ qw(fargo fargo golfer hilton icon) ];

=item *

Declare any variables to be used in testing or benchmark functions:

    my ($args, $result);

Populate the list of arguments such that the same list can be used in both
testing and benchmarking.

    $args =  [ $fg, $fghi, $fgh, $bcdefg, $fghi ];

=item *

Create a block in which you write and run tests of the function you wish to
refactor.  This block will B<not> be run if you call the Direct program with
C<--benchmarks-only> on the command line.

    unless ($benchmarks_only) {
        $result = is_LsubsetR( $args, [ 3,2 ] );
        ok($result, "Got expected subset relationship");

        $result = is_LsubsetR( $args, [ 2,3 ] );
        ok(! $result, "Got expected subset relationship");

        $result = is_LsubsetR( $args );
        ok(! $result, "Got expected subset relationship");
    }

You can probably adapt tests in your library's existing test suite for use
inside the Direct program.

=item *

Next, create a block in which you construct benchmarks of the function you
wish to refactor.  This block will B<not> be run if you call the Direct
program with C<--tests-only> on the command line.

    unless ($tests_only) {
        timethis( 20_000, sub { is_LsubsetR( $args, [ 3,2 ] ) } );
        timethis( 20_000, sub { is_LsubsetR( $args, [ 2,3 ] ) } );
        timethis( 20_000, sub { is_LsubsetR( $args          ) } );
    }

=back

You should be able to run this program from the command-line and observe
different output depending on whether you chose C<--tests-only>,
C<--benchmarks-only> or neither.

    $ perl subset.pl --tests-only
    ok 1 - Running tests only
    ok 2 - Got expected subset relationship
    ok 3 - Got expected subset relationship
    ok 4 - Got expected subset relationship
    1..4

    $ perl subset.pl --benchmarks-only
    ok 1 - Running benchmarks only
    timethis 20000:  2 wallclock secs ( 1.73 usr +  0.00 sys =  1.73 CPU) @ 11560.69/s (n=20000)
    timethis 20000:  2 wallclock secs ( 1.73 usr +  0.00 sys =  1.73 CPU) @ 11560.69/s (n=20000)
    timethis 20000:  1 wallclock secs ( 1.70 usr +  0.00 sys =  1.70 CPU) @ 11764.71/s (n=20000)
    1..1

    $ perl subset.pl
    ok 1 - Got expected subset relationship
    ok 2 - Got expected subset relationship
    ok 3 - Got expected subset relationship
    timethis 20000:  2 wallclock secs ( 1.72 usr +  0.00 sys =  1.72 CPU) @ 11627.91/s (n=20000)
    timethis 20000:  1 wallclock secs ( 1.72 usr +  0.00 sys =  1.72 CPU) @ 11627.91/s (n=20000)
    timethis 20000:  2 wallclock secs ( 1.68 usr +  0.00 sys =  1.68 CPU) @ 11904.76/s (n=20000)
    1..3

You are now in a position to customize your Direct program, I<e.g.,> by adding
debugging statements which only print if the program has been called with
C<--verbose> on the command line.

=cut

=head2 Running F<compare-git-versions>

F<compare-git-versions> is a B<Wrapper> program which runs your B<Direct>
program twice, once in a B<"before refactoring" state> and once in a B<"after
refactoring"> state.  F<compare-git-versions> performs a F<git checkout> of
the (presumably) older version of the code, runs the Direct program printing
results to STDOUT, then performs a checkout of your (presumably) revised
version of the code and re-runs the Direct program.

The command-line options you choose for F<compare-git-versions> are, as
needed, passed to the command-line of the Direct program.  In this way, you
can use the Wrapper program to run only tests in the two different versions of
the Direct program; run only benchmarks in the two versions of the Direct
program; or run both tests and benchmarks of the two versions of the Direct
program.

    perl compare-git-versions \
        --workdir=/home/perlhacker/gitwork/list-compare \
        --program=/home/perlhacker/learn/perl/lc/subset.pl \
        --before=v0.38 \
        --after=master \
        --tests-only \
        --verbose
   # or, instead of 'tests-only':

        --benchmarks-only

=head3 Command-line options

All command-line options use the double-hyphen syntax.

=over 4

=item * C<workdir>

The full path to your git checkout directory.  Required.

=item * C<program>

The full path to the Direct program described above.  Required.

=item * C<before>

A string holding the git branch, tag, or commit against which you wish to
benchmark your changes.  Required.

=item * C<after>

A string holding the git branch, tag, or commit you wish to benchmark.
Required.

=item * C<benchmarks-only>

Run only benchmarking in the Direct program.

=item * C<tests=only>

Run only tests in the Direct program.

=item * C<verbose>

If set to true value, will be passed through to the Direct program and, if the
Direct program accepts it as a command-line switch, will generate verbose
output.

=back

You may select either C<--benchmarks-only> or C<--tests-only> but not both
simultaneously.

Example with C<--tests-only>:

    $ perl /home/jkeenan/gitwork/compare-git-versions/compare-git-versions   \
        --workdir=/home/jkeenan/gitwork/list-compare \
        --program=/home/jkeenan/learn/perl/lc/subset.pl \
        --before=master \
        --after=refactored
        --tests-only
    Switched to branch 'master'
    Your branch is up-to-date with 'origin/master'.
    Checking if your kit is complete...
    Looks good
    Generating a Unix-style Makefile
    Writing Makefile for List::Compare
    Writing MYMETA.yml and MYMETA.json
    cp lib/List/Compare/Functional.pm blib/lib/List/Compare/Functional.pm
    cp lib/List/Compare.pm blib/lib/List/Compare.pm
    cp lib/List/Compare/Base/_Engine.pm blib/lib/List/Compare/Base/_Engine.pm
    cp lib/List/Compare/Base/_Auxiliary.pm blib/lib/List/Compare/Base/_Auxiliary.pm
    Manifying 4 pod documents
    ok 1 - Running tests only
    ok 2 - Got expected subset relationship
    ok 3 - Got expected subset relationship
    ok 4 - Got expected subset relationship
    1..4
    Switched to branch 'refactored'
    Checking if your kit is complete...
    Looks good
    Generating a Unix-style Makefile
    Writing Makefile for List::Compare
    Writing MYMETA.yml and MYMETA.json
    cp lib/List/Compare/Base/_Auxiliary.pm blib/lib/List/Compare/Base/_Auxiliary.pm
    cp lib/List/Compare/Functional.pm blib/lib/List/Compare/Functional.pm
    cp lib/List/Compare/Base/_Engine.pm blib/lib/List/Compare/Base/_Engine.pm
    cp lib/List/Compare.pm blib/lib/List/Compare.pm
    Manifying 4 pod documents
    ok 1 - Running tests only
    ok 2 - Got expected subset relationship
    ok 3 - Got expected subset relationship
    ok 4 - Got expected subset relationship
    1..4

Example with C<--benchmarks-only>:

    $ perl /home/jkeenan/gitwork/compare-git-versions/compare-git-versions   \
        --workdir=/home/jkeenan/gitwork/list-compare \
        --program=/home/jkeenan/learn/perl/lc/subset.pl \
        --before=master \
        --after=refactored
        --benchmarks-only
    Switched to branch 'master'
    Your branch is up-to-date with 'origin/master'.
    Checking if your kit is complete...
    Looks good
    Generating a Unix-style Makefile
    Writing Makefile for List::Compare
    Writing MYMETA.yml and MYMETA.json
    cp lib/List/Compare.pm blib/lib/List/Compare.pm
    cp lib/List/Compare/Base/_Engine.pm blib/lib/List/Compare/Base/_Engine.pm
    cp lib/List/Compare/Base/_Auxiliary.pm
    blib/lib/List/Compare/Base/_Auxiliary.pm
    cp lib/List/Compare/Functional.pm blib/lib/List/Compare/Functional.pm
    Manifying 4 pod documents
    ok 1 - Running benchmarks only
    timethis 20000:  1 wallclock secs ( 1.74 usr +  0.00 sys =  1.74 CPU) @ 11494.25/s (n=20000)
    timethis 20000:  2 wallclock secs ( 1.74 usr +  0.00 sys =  1.74 CPU) @ 11494.25/s (n=20000)
    timethis 20000:  2 wallclock secs ( 1.71 usr +  0.00 sys =  1.71 CPU) @ 11695.91/s (n=20000)
    1..1
    Switched to branch 'refactored'
    Checking if your kit is complete...
    Looks good
    Generating a Unix-style Makefile
    Writing Makefile for List::Compare
    Writing MYMETA.yml and MYMETA.json
    cp lib/List/Compare.pm blib/lib/List/Compare.pm
    cp lib/List/Compare/Functional.pm blib/lib/List/Compare/Functional.pm
    cp lib/List/Compare/Base/_Auxiliary.pm
    blib/lib/List/Compare/Base/_Auxiliary.pm
    cp lib/List/Compare/Base/_Engine.pm blib/lib/List/Compare/Base/_Engine.pm
    Manifying 4 pod documents
    ok 1 - Running benchmarks only
    timethis 20000:  1 wallclock secs ( 0.95 usr +  0.00 sys =  0.95 CPU) @ 21052.63/s (n=20000)
    timethis 20000:  1 wallclock secs ( 0.96 usr +  0.00 sys =  0.96 CPU) @ 20833.33/s (n=20000)
    timethis 20000:  1 wallclock secs ( 0.92 usr +  0.00 sys =  0.92 CPU) @ 21739.13/s (n=20000)
    1..1


=head1 BUGS

Send bug reports or feedback to jkeenan at cpan dot org.

=head1 LICENSE

This program is licensed under the same terms as Perl itself.  No warranty
express or implied.  Copyright 2015 James E Keenan.

=cut

# vim: syn=perl
